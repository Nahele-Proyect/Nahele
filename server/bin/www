const http = require('http')

let app = require('../app')

app.use((req, res, next) => {
  res.status(404)
  res.render('not-found')
})

app.use((err, req, res, next) => {

  console.error('ERROR', req.method, req.path, err)

  if (!res.headersSent) {
    res.status(500)
    res.render('error')
  }
})

let server = http.createServer(app)

server.on('error', error => {
  if (error.syscall !== 'listen') {
    throw error
  }

  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
})

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`)
})

const router = require('../routes/router')
const socketio = require('socket.io')
const io = socketio(server)
app.use(router)

const {
  addUser,
  removeUser,
  getUser,
  getUsersInRoom
} = require('../configs/users.socket.config')

io.on('connect', (socket) => {
  socket.on('join', ({
    name,
    room
  }, callback) => {
    const {
      error,
      user
    } = addUser({
      id: socket.id,
      name,
      room
    })

    if (error) return callback(error)

    socket.join(user.room)

    socket.emit('message', {
      user: 'admin',
      text: `ยก${user.name}, bienvenid@ a la sala ${user.room} :)!`
    })
    socket.broadcast.to(user.room).emit('message', {
      user: 'admin',
      text: `${user.name} ha entrado en el chat!`
    })

    io.to(user.room).emit('roomData', {
      room: user.room,
      users: getUsersInRoom(user.room)
    })

    callback()
  })

  socket.on('sendMessage', (message, callback) => {
    const user = getUser(socket.id)

    io.to(user.room).emit('message', {
      user: user.name,
      text: message
    })

    callback()
  })

  socket.on('disconnect', () => {

    const user = removeUser(socket.id)

    if (user) {
      io.to(user.room).emit('message', {
        user: 'Admin',
        text: `${user.name} ha dejado el chat.`
      })
      io.to(user.room).emit('roomData', {
        room: user.room,
        users: getUsersInRoom(user.room)
      })
    }
  })
})